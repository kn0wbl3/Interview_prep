def sort_012(input_list):
    """
    Given an input array consisting on only 0, 1, and 2, sort the array in a single traversal.

    Args:
       input_list(list): List to be sorted
       
    idea from https://www.interviewcake.com/question/python3/top-scores?course=fc1&section=hashing-and-hash-tables
    """
    counting_arr = [0] * (2+1) #2 is hardcoded because the problem says all numbers go from 0-2. If i could re-code the original problem I would have the highest possible number be an input for modular purposes.
    sorted_nums = []
    
    for num in input_list: #only traverses the input list once
        counting_arr[num] += 1
        
    for i in range(len(counting_arr)):
        while counting_arr[i] > 0:
            sorted_nums.append(i)
            counting_arr[i]-=1
    
    return sorted_nums

def tests():
    test_lists = [
                    [[0, 0, 2, 2, 2, 1, 1, 1, 2, 0, 2], [0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2]],
                    [[2, 1, 2, 0, 0, 2, 1, 0, 1, 0, 0, 2, 2, 2, 1, 2, 0, 0, 0, 2, 1, 0, 2, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]],
                    [[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2]],
                    [[0], [0]],
                    [[1], [1]],
                    [[2], [2]],
                    [[0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0]]
                 ]
    
    for test in test_lists:
        assert(sort_012(test[0]) == test[1])
        
    print('tests done')
tests()
