'''
Help from https://towardsdatascience.com/implementing-a-trie-data-structure-in-python-in-less-than-100-lines-of-code-a877ea23c1a1

'''

class TrieNode(object):
    def __init__(self):
        self.is_word = False
        self.children = {}
        
    def insert(self, char):
        ## Add a child node in this Trie
        self.children[char] = TrieNode()
        
    def suffixes(self, suffix = ''):
        ## Recursive function that collects the suffix for 
        ## all complete words below this point
        
        suffix_list = []
        children = self.children
        
        for char in children:
            suffix_list = children.get(char).suf_helper(suffix + char, suffix_list)
        
        return suffix_list
    
    def suf_helper(self, new_suffix, new_suf_list):
        new_children = self.children
        if self.is_word:
            new_suf_list.append(new_suffix)
        
        for char, node in new_children.items():
            node.suf_helper(new_suffix + char, new_suf_list)
        return new_suf_list


class Trie(object):
    def __init__(self):
        self.root = TrieNode()

    def add(self, word):
        """
        Add `word` to trie
        """
        current_node = self.root

        for char in word:
            if char not in current_node.children:
                current_node.insert(char)
            current_node = current_node.children[char]

        current_node.is_word = True

    def exists(self, word):
        """
        Check if word exists in trie
        """
        current_node = self.root

        for char in word:
            if char not in current_node.children:
                return False
            current_node = current_node.children[char]

        return current_node.is_word
    
    def find(self, prefix):
        if not self.root.children:
            return False
        
        current_node = self.root

        for char in prefix: #can search for a prefix with more than 1 char
            if char not in current_node.children:
                return False
            current_node = current_node.children[char]
 
        return current_node


word_list = ['apple', 'bear', 'goo', 'good', 'goodbye', 'goods', 'goodwill', 'gooses'  ,'zebra']
word_trie = Trie()

# Add words
for word in word_list:
    word_trie.add(word)

# Test words
test_words = ['bear', 'goo', 'good', 'goos']
for word in test_words:
    if word_trie.exists(word):
        print('"{}" is a word.'.format(word))
    else:
        print('"{}" is not a word.'.format(word))
        
#test finding prefixes
test_prefixes = ['a', 'good', 'g']
for pref in test_prefixes:
    print(word_trie.find(pref).children)
    '''
    should print:
    {'p': <__main__.TrieNode object at 0x0000025DEE77B550>}
    
    {'b': <__main__.TrieNode object at 0x0000025DEE77B0B8>, 's': <__main__.TrieNode object at 0x0000025DEE77B0F0>, 'w': <__main__.TrieNode object at 0x0000025DEE77B780>}
    
    {'o': <__main__.TrieNode object at 0x0000025DEE77B208>}
    '''
    
#test suffixes
for pref in test_prefixes:
    st_node = word_trie.find(pref)
    print(st_node.suffixes())
    
    '''
    should print:
    ['pple']
    ['bye', 's', 'will']
    ['oo', 'ood', 'oodbye', 'oods', 'oodwill', 'ooses']
    '''
